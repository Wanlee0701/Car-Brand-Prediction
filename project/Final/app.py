import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from lightgbm import LGBMClassifier
from imblearn.over_sampling import RandomOverSampler
# import joblib
# import os

# --- ƒê·∫∑t st.set_page_config() l√™n ƒë·∫ßu ---
st.set_page_config(page_title="D·ª± ƒëo√°n H√£ng Xe", layout="wide")

# --- C√°c h√†m ti·ªÅn x·ª≠ l√Ω t·ª´ notebook (ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh m·ªôt ch√∫t) ---
def handle_missing_values_app(data):
    # ... (gi·ªØ nguy√™n ph·∫ßn c√≤n l·∫°i c·ªßa h√†m) ...
    if 'Customer Name' in data.columns and data['Customer Name'].isnull().any():
        data = data.dropna(subset=['Customer Name'])
    return data

def detect_and_treat_outliers_iqr_app(df, column_name, factor=1.5):
    # ... (gi·ªØ nguy√™n ph·∫ßn c√≤n l·∫°i c·ªßa h√†m) ...
    if column_name not in df.columns or not pd.api.types.is_numeric_dtype(df[column_name]):
        return df.copy()

    df_processed = df.copy()
    Q1 = df_processed[column_name].quantile(0.25)
    Q3 = df_processed[column_name].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - factor * IQR
    upper_bound = Q3 + factor * IQR

    df_processed[column_name] = np.where(
        df_processed[column_name] < lower_bound, lower_bound,
        np.where(df_processed[column_name] > upper_bound, upper_bound, df_processed[column_name])
    )
    return df_processed

# --- H√†m t·∫£i d·ªØ li·ªáu, ti·ªÅn x·ª≠ l√Ω v√† hu·∫•n luy·ªán m√¥ h√¨nh ---
@st.cache_resource
def load_data_and_train_model():
    # ... (gi·ªØ nguy√™n ph·∫ßn c√≤n l·∫°i c·ªßa h√†m) ...
    try:
        data_orig_local = pd.read_csv('Car Sales.xlsx - car_data.csv')
    except FileNotFoundError:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu 'Car Sales.xlsx - car_data.csv'. H√£y ƒë·∫£m b·∫£o file n√†y n·∫±m c√πng th∆∞ m·ª•c v·ªõi app.py.")
        return None, None, None, None, None, None

    data = data_orig_local.copy()

    data = handle_missing_values_app(data)

    numerical_cols_for_outlier = ['Annual Income', 'Price ($)']
    for col_name in numerical_cols_for_outlier:
        if col_name in data.columns:
            data = detect_and_treat_outliers_iqr_app(data, col_name, factor=1.5)

    features_to_drop = ['Car_id', 'Date', 'Customer Name', 'Phone', 'Dealer_Name', 'Dealer_No ', 'Engine', 'Model', 'Gender']
    features_to_drop_existing = [col for col in features_to_drop if col in data.columns]

    y_series = data['Company']
    X_df = data.drop(columns=['Company'] + features_to_drop_existing, errors='ignore')

    le_target = LabelEncoder()
    y_encoded = le_target.fit_transform(y_series)
    num_classes = len(le_target.classes_)

    if num_classes < 2:
        st.error("C·∫ßn √≠t nh·∫•t 2 h√£ng xe ƒë·ªÉ th·ª±c hi·ªán b√†i to√°n ph√¢n lo·∫°i.")
        return None, None, None, None, None, None

    numerical_cols_model = X_df.select_dtypes(include=np.number).columns.tolist()
    categorical_cols_model = X_df.select_dtypes(include=['object', 'category']).columns.tolist()

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', StandardScaler(), numerical_cols_model),
            ('cat', OneHotEncoder(handle_unknown='ignore', sparse_output=False), categorical_cols_model)
        ],
        remainder='passthrough'
    )

    ros = RandomOverSampler(random_state=42)
    X_resampled, y_resampled = ros.fit_resample(X_df, y_encoded)

    final_model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                                           ('classifier', LGBMClassifier(n_estimators=200, learning_rate=0.1, max_depth=40, num_leaves=15,objective='multiclass', num_classes=30))])

    final_model_pipeline.fit(X_resampled, y_resampled)

    unique_values = {col: X_df[col].unique().tolist() for col in categorical_cols_model}
    min_max_values = {col: (X_df[col].min(), X_df[col].max()) for col in numerical_cols_model}

    return final_model_pipeline, le_target, X_df.columns, unique_values, min_max_values, data_orig_local


# --- T·∫£i m√¥ h√¨nh v√† c√°c ƒë·ªëi t∆∞·ª£ng c·∫ßn thi·∫øt ---
pipeline_objects = load_data_and_train_model()

if pipeline_objects and pipeline_objects[0] is not None:
    final_model_pipeline, le_target, feature_names_model, unique_categorical_values, min_max_numerical_values, data_orig = pipeline_objects

    # --- C√°c l·ªánh Streamlit kh√°c b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢y ---
    st.title("üöó D·ª± ƒëo√°n H√£ng Xe √î T√¥")
    st.markdown("Nh·∫≠p c√°c th√¥ng tin c·ªßa xe ƒë·ªÉ d·ª± ƒëo√°n h√£ng s·∫£n xu·∫•t.")

    with st.sidebar:
        st.header("Th√¥ng tin xe")
        user_inputs = {}

        if 'Annual Income' in feature_names_model:
            min_val_ai, max_val_ai = min_max_numerical_values.get('Annual Income', (0, 10000000))
            user_inputs['Annual Income'] = st.number_input(
                "Thu nh·∫≠p h√†ng nƒÉm (Annual Income)",
                min_value=0,
                value=int(data_orig['Annual Income'].median()) if 'Annual Income' in data_orig else 500000,
                step=1000,
                help=f"Gi√° tr·ªã n√™n trong kho·∫£ng ({int(min_val_ai)} - {int(max_val_ai)}) d·ª±a tr√™n d·ªØ li·ªáu g·ªëc."
            )

        if 'Transmission' in feature_names_model and 'Transmission' in unique_categorical_values:
            user_inputs['Transmission'] = st.selectbox("Lo·∫°i h·ªôp s·ªë (Transmission)", options=unique_categorical_values['Transmission'])
        
        if 'Color' in feature_names_model and 'Color' in unique_categorical_values:
            user_inputs['Color'] = st.selectbox("M√†u s·∫Øc (Color)", options=unique_categorical_values['Color'])

        if 'Price ($)' in feature_names_model:
            min_val_p, max_val_p = min_max_numerical_values.get('Price ($)', (0, 100000))
            user_inputs['Price ($)'] = st.number_input(
                "Gi√° xe (Price $)",
                min_value=0,
                value=int(data_orig['Price ($)'].median()) if 'Price ($)' in data_orig else 20000,
                step=100,
                help=f"Gi√° tr·ªã n√™n trong kho·∫£ng ({int(min_val_p)} - {int(max_val_p)}) d·ª±a tr√™n d·ªØ li·ªáu g·ªëc."
            )
        
        if 'Body Style' in feature_names_model and 'Body Style' in unique_categorical_values:
            user_inputs['Body Style'] = st.selectbox("Ki·ªÉu d√°ng xe (Body Style)", options=unique_categorical_values['Body Style'])

        if 'Dealer_Region' in feature_names_model and 'Dealer_Region' in unique_categorical_values:
            user_inputs['Dealer_Region'] = st.selectbox("Khu v·ª±c ƒê·∫°i l√Ω (Dealer_Region)", options=unique_categorical_values['Dealer_Region'])

        predict_button = st.button("D·ª± ƒëo√°n H√£ng Xe", type="primary")

    if predict_button:
        if not user_inputs or len(user_inputs) < len(feature_names_model):
            st.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin cho t·∫•t c·∫£ c√°c tr∆∞·ªùng.")
        else:
            input_list = []
            for col in feature_names_model:
                if col in user_inputs:
                    input_list.append(user_inputs[col])
                else:
                    if col in data_orig.select_dtypes(include=np.number).columns:
                         input_list.append(data_orig[col].median())
                    elif col in data_orig.columns:
                         input_list.append(data_orig[col].mode()[0] if not data_orig[col].mode().empty else None)
                    else:
                        input_list.append(None)

            input_df = pd.DataFrame([input_list], columns=feature_names_model)

            st.subheader("Th√¥ng tin xe ƒë√£ nh·∫≠p:")
            st.dataframe(input_df)

            try:
                prediction_encoded = final_model_pipeline.predict(input_df)
                prediction_proba = final_model_pipeline.predict_proba(input_df)
                predicted_company = le_target.inverse_transform(prediction_encoded)[0]
                
                st.subheader("K·∫øt qu·∫£ D·ª± ƒëo√°n:")
                st.success(f"H√£ng xe ƒë∆∞·ª£c d·ª± ƒëo√°n l√†: **{predicted_company}**")

                st.markdown("---")
                st.subheader("X√°c su·∫•t D·ª± ƒëo√°n cho t·ª´ng H√£ng:")
                proba_df = pd.DataFrame(prediction_proba, columns=le_target.classes_)
                proba_df_transposed = proba_df.T.rename(columns={0: 'X√°c su·∫•t'})
                proba_df_transposed = proba_df_transposed.sort_values(by='X√°c su·∫•t', ascending=False)
                
                top_n = 5
                st.dataframe(proba_df_transposed.head(top_n).style.format("{:.2%}"))
                st.bar_chart(proba_df_transposed.head(top_n))

            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {e}")
                st.error("Vui l√≤ng ki·ªÉm tra l·∫°i c√°c gi√° tr·ªã ƒë·∫ßu v√†o ho·∫∑c d·ªØ li·ªáu hu·∫•n luy·ªán.")

    st.markdown("---")
    st.markdown("*L∆∞u √Ω: ƒê√¢y l√† m√¥ h√¨nh d·ª± ƒëo√°n d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ cung c·∫•p v√† c√≥ th·ªÉ kh√¥ng ho√†n to√†n ch√≠nh x√°c trong m·ªçi tr∆∞·ªùng h·ª£p.*")

else:
    st.error("Kh√¥ng th·ªÉ t·∫£i v√† hu·∫•n luy·ªán m√¥ h√¨nh. Vui l√≤ng ki·ªÉm tra th√¥ng b√°o l·ªói.")